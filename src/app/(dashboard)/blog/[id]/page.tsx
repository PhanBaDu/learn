'use client';

import { Calendar, Clock, User, ArrowLeft, Heart, Share2, MessageCircle, Code, Zap, Shield, Globe } from 'lucide-react';
import Link from 'next/link';
import { notFound } from 'next/navigation';

interface BlogPost {
  id: string;
  title: string;
  excerpt: string;
  content: string;
  author: string;
  date: string;
  readTime: string;
  tags: string[];
  image: string;
  featured?: boolean;
}

const blogPosts: BlogPost[] = [
  {
    id: '1',
    title: 'Next.js 14: H∆∞·ªõng d·∫´n to√†n di·ªán cho React Framework hi·ªán ƒë·∫°i',
    excerpt: 'Kh√°m ph√° Next.js 14 v·ªõi App Router, Server Components, v√† c√°c t√≠nh nƒÉng m·ªõi nh·∫•t ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªáu su·∫•t cao.',
    content: `
      <h2>Next.js l√† g√¨?</h2>
      <p>Next.js l√† m·ªôt React framework cho ph√©p b·∫°n x√¢y d·ª±ng ·ª©ng d·ª•ng web full-stack v·ªõi c√°c t√≠nh nƒÉng nh∆∞ server-side rendering (SSR), static site generation (SSG), API routes, v√† nhi·ªÅu t√≠nh nƒÉng kh√°c. ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi Vercel, Next.js ƒë√£ tr·ªü th√†nh m·ªôt trong nh·ªØng framework ph·ªï bi·∫øn nh·∫•t cho React developers.</p>
      
      <h3>Nh·ªØng t√≠nh nƒÉng ch√≠nh c·ªßa Next.js 14</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 my-6">
        <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
          <h4 class="font-semibold text-blue-800 mb-2">üöÄ App Router</h4>
          <p class="text-blue-700 text-sm">File-system based routing v·ªõi Server Components m·∫∑c ƒë·ªãnh</p>
        </div>
        <div class="bg-green-50 p-4 rounded-lg border border-green-200">
          <h4 class="font-semibold text-green-800 mb-2">‚ö° Server Components</h4>
          <p class="text-green-700 text-sm">Gi·∫£m bundle size v√† c·∫£i thi·ªán performance</p>
        </div>
        <div class="bg-purple-50 p-4 rounded-lg border border-purple-200">
          <h4 class="font-semibold text-purple-800 mb-2">üîß Turbopack</h4>
          <p class="text-purple-700 text-sm">Bundler nhanh h∆°n Webpack 700x</p>
        </div>
        <div class="bg-orange-50 p-4 rounded-lg border border-orange-200">
          <h4 class="font-semibold text-orange-800 mb-2">üì± Responsive</h4>
          <p class="text-orange-700 text-sm">T·ªëi ∆∞u cho m·ªçi thi·∫øt b·ªã v√† m√†n h√¨nh</p>
        </div>
      </div>

      <h3>1. C√†i ƒë·∫∑t v√† Kh·ªüi t·∫°o d·ª± √°n</h3>
      <p>B·∫Øt ƒë·∫ßu v·ªõi Next.js r·∫•t ƒë∆°n gi·∫£n:</p>
      <pre><code class="language-bash">npx create-next-app@latest my-next-app
cd my-next-app
npm run dev</code></pre>
      
      <p>Ho·∫∑c v·ªõi TypeScript:</p>
      <pre><code class="language-bash">npx create-next-app@latest my-next-app --typescript --tailwind --eslint</code></pre>

      <h3>2. App Router - C√°ch ti·∫øp c·∫≠n m·ªõi</h3>
      <p>Next.js 14 s·ª≠ d·ª•ng App Router v·ªõi c·∫•u tr√∫c th∆∞ m·ª•c m·ªõi:</p>
      <pre><code class="language-plaintext">app/
‚îú‚îÄ‚îÄ layout.tsx          # Root layout
‚îú‚îÄ‚îÄ page.tsx           # Home page
‚îú‚îÄ‚îÄ about/
‚îÇ   ‚îî‚îÄ‚îÄ page.tsx       # About page
‚îú‚îÄ‚îÄ blog/
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx     # Blog layout
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx       # Blog list
‚îÇ   ‚îî‚îÄ‚îÄ [slug]/
‚îÇ       ‚îî‚îÄ‚îÄ page.tsx   # Dynamic blog post
‚îî‚îÄ‚îÄ api/
    ‚îî‚îÄ‚îÄ users/
        ‚îî‚îÄ‚îÄ route.ts   # API route</code></pre>

      <h3>3. Server Components vs Client Components</h3>
      <p>Next.js 14 m·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng Server Components:</p>
      
      <h4>Server Component (m·∫∑c ƒë·ªãnh)</h4>
      <pre><code class="language-tsx">// app/page.tsx
async function getData() {
  const res = await fetch('https://api.example.com/data')
  return res.json()
}

export default async function Page() {
  const data = await getData()
  
  return (
    &lt;main&gt;
      &lt;h1&gt;{data.title}&lt;/h1&gt;
      &lt;p&gt;{data.description}&lt;/p&gt;
    &lt;/main&gt;
  )
}</code></pre>

      <h4>Client Component</h4>
      <pre><code class="language-tsx">'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)
  
  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count}&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;
        Increment
      &lt;/button&gt;
    &lt;/div&gt;
  )
}</code></pre>

      <h3>4. Data Fetching</h3>
      <p>Next.js cung c·∫•p nhi·ªÅu c√°ch ƒë·ªÉ fetch data:</p>
      
      <h4>Server Components</h4>
      <pre><code class="language-tsx">// Fetch data tr·ª±c ti·∫øp trong Server Component
async function getPosts() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts')
  return res.json()
}

export default async function Posts() {
  const posts = await getPosts()
  
  return (
    &lt;ul&gt;
      {posts.map((post) =&gt; (
        &lt;li key={post.id}&gt;{post.title}&lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
}</code></pre>

      <h4>API Routes</h4>
      <pre><code class="language-tsx">// app/api/posts/route.ts
import { NextResponse } from 'next/server'

export async function GET() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts')
  const posts = await res.json()
  
  return NextResponse.json(posts)
}

export async function POST(request: Request) {
  const body = await request.json()
  
  // Process the data...
  
  return NextResponse.json({ message: 'Post created' })
}</code></pre>

      <h3>5. Styling v√† CSS</h3>
      <p>Next.js h·ªó tr·ª£ nhi·ªÅu c√°ch styling:</p>
      
      <h4>CSS Modules</h4>
      <pre><code class="language-css">/* app/components/Button.module.css */
.button {
  padding: 12px 24px;
  border-radius: 8px;
  background: #0070f3;
  color: white;
  border: none;
  cursor: pointer;
}

.button:hover {
  background: #0051b3;
}</code></pre>

      <pre><code class="language-tsx">// app/components/Button.tsx
import styles from './Button.module.css'

export default function Button({ children }) {
  return (
    &lt;button className={styles.button}&gt;
      {children}
    &lt;/button&gt;
  )
}</code></pre>

      <h4>Tailwind CSS</h4>
      <pre><code class="language-tsx">export default function Card() {
  return (
    &lt;div className="max-w-sm rounded-lg overflow-hidden shadow-lg bg-white"&gt;
      &lt;div className="px-6 py-4"&gt;
        &lt;div className="font-bold text-xl mb-2"&gt;Card Title&lt;/div&gt;
        &lt;p className="text-gray-700 text-base"&gt;
          Card description goes here...
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}</code></pre>

      <h3>6. Routing v√† Navigation</h3>
      <p>Next.js App Router s·ª≠ d·ª•ng file-system based routing:</p>
      
      <h4>Static Routes</h4>
      <pre><code class="language-tsx">// app/about/page.tsx
export default function About() {
  return (
    &lt;div&gt;
      &lt;h1&gt;About Us&lt;/h1&gt;
      &lt;p&gt;This is the about page.&lt;/p&gt;
    &lt;/div&gt;
  )
}</code></pre>

      <h4>Dynamic Routes</h4>
      <pre><code class="language-tsx">// app/blog/[slug]/page.tsx
export default function BlogPost({ params }: { params: { slug: string } }) {
  return (
    &lt;article&gt;
      &lt;h1&gt;Blog Post: {params.slug}&lt;/h1&gt;
      &lt;p&gt;This is the content for {params.slug}&lt;/p&gt;
    &lt;/article&gt;
  )
}</code></pre>

      <h4>Navigation</h4>
      <pre><code class="language-tsx">import Link from 'next/link'

export default function Navigation() {
  return (
    &lt;nav&gt;
      &lt;Link href="/"&gt;Home&lt;/Link&gt;
      &lt;Link href="/about"&gt;About&lt;/Link&gt;
      &lt;Link href="/blog"&gt;Blog&lt;/Link&gt;
    &lt;/nav&gt;
  )
}</code></pre>

      <h3>7. Performance Optimization</h3>
      <p>Next.js c√≥ nhi·ªÅu t√≠nh nƒÉng t·ªëi ∆∞u performance:</p>
      
      <h4>Image Optimization</h4>
      <pre><code class="language-tsx">import Image from 'next/image'

export default function OptimizedImage() {
  return (
    &lt;Image
      src="/hero.jpg"
      alt="Hero image"
      width={1200}
      height={600}
      priority
      className="rounded-lg"
    /&gt;
  )
}</code></pre>

      <h4>Font Optimization</h4>
      <pre><code class="language-tsx">import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    &lt;html lang="en"&gt;
      &lt;body className={inter.className}&gt;{children}&lt;/body&gt;
    &lt;/html&gt;
  )
}</code></pre>

      <h3>8. Deployment</h3>
      <p>Deploy Next.js app r·∫•t d·ªÖ d√†ng:</p>
      
      <h4>Vercel (Recommended)</h4>
      <pre><code class="language-bash">npm install -g vercel
vercel</code></pre>

      <h4>Build cho production</h4>
      <pre><code class="language-bash">npm run build
npm start</code></pre>

      <h3>9. Best Practices</h3>
      <ul>
        <li><strong>S·ª≠ d·ª•ng Server Components khi c√≥ th·ªÉ:</strong> Gi·∫£m bundle size</li>
        <li><strong>Optimize images:</strong> S·ª≠ d·ª•ng Next.js Image component</li>
        <li><strong>Code splitting:</strong> T·ª± ƒë·ªông v·ªõi App Router</li>
        <li><strong>SEO optimization:</strong> S·ª≠ d·ª•ng metadata API</li>
        <li><strong>Error handling:</strong> T·∫°o error.tsx v√† loading.tsx</li>
      </ul>

      <h3>10. K·∫øt lu·∫≠n</h3>
      <p>Next.js 14 l√† m·ªôt framework m·∫°nh m·∫Ω cho vi·ªác x√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i. V·ªõi App Router, Server Components, v√† nhi·ªÅu t√≠nh nƒÉng t·ªëi ∆∞u, Next.js gi√∫p developers t·∫°o ra nh·ªØng ·ª©ng d·ª•ng web nhanh, SEO-friendly, v√† d·ªÖ maintain.</p>
      
      <p>B·∫Øt ƒë·∫ßu v·ªõi Next.js ngay h√¥m nay ƒë·ªÉ tr·∫£i nghi·ªám s·ª©c m·∫°nh c·ªßa React framework hi·ªán ƒë·∫°i nh·∫•t!</p>
    `,
    author: 'Next.js Team',
    date: '2024-01-20',
    readTime: '12 ph√∫t',
    tags: ['Next.js', 'React', 'Full-Stack', 'Web Development'],
    image: '/api/placeholder/400/250',
    featured: true
  }
];

interface BlogPostPageProps {
  params: {
    id: string;
  };
}

export default function BlogPostPage({ params }: BlogPostPageProps) {
  const post = blogPosts.find(p => p.id === params.id);

  if (!post) {
    notFound();
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 py-8">
        <Link 
          href="/blog"
          className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors mb-8"
        >
          <ArrowLeft className="w-4 h-4" />
          Quay l·∫°i Blog
        </Link>

        <header className="mb-8">
          <div className="flex items-center gap-4 text-sm text-gray-500 mb-4">
            <span className="flex items-center gap-1">
              <User className="w-4 h-4" />
              {post.author}
            </span>
            <span className="flex items-center gap-1">
              <Calendar className="w-4 h-4" />
              {new Date(post.date).toLocaleDateString('vi-VN')}
            </span>
            <span className="flex items-center gap-1">
              <Clock className="w-4 h-4" />
              {post.readTime}
            </span>
          </div>

          <h1 className="text-3xl md:text-4xl font-bold mb-4 text-gray-900">{post.title}</h1>
          <p className="text-xl text-gray-600 mb-6">{post.excerpt}</p>

          <div className="flex items-center gap-2 mb-6">
            {post.tags.map(tag => (
              <span key={tag} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
                {tag}
              </span>
            ))}
          </div>

          <div className="flex items-center gap-4">
            <button className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
              <Heart className="w-4 h-4" />
              Th√≠ch
            </button>
            <button className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
              <Share2 className="w-4 h-4" />
              Chia s·∫ª
            </button>
            <button className="flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
              <MessageCircle className="w-4 h-4" />
              B√¨nh lu·∫≠n
            </button>
          </div>
        </header>

        <article className="prose prose-lg max-w-none">
          <div 
            className="bg-white rounded-xl p-8 mb-8 shadow-sm border border-gray-200"
            dangerouslySetInnerHTML={{ __html: `
              <style>
                .blog-content h2 {
                  font-size: 2rem;
                  font-weight: 800;
                  color: #1f2937;
                  margin-top: 2.5rem;
                  margin-bottom: 1.5rem;
                  padding-bottom: 0.5rem;
                  border-bottom: 3px solid #3b82f6;
                  display: inline-block;
                }
                
                .blog-content h3 {
                  font-size: 1.5rem;
                  font-weight: 700;
                  color: #374151;
                  margin-top: 2rem;
                  margin-bottom: 1rem;
                  padding-left: 1rem;
                  border-left: 4px solid #3b82f6;
                }
                
                .blog-content h4 {
                  font-size: 1.25rem;
                  font-weight: 600;
                  color: #4b5563;
                  margin-top: 1.5rem;
                  margin-bottom: 0.75rem;
                  background: linear-gradient(90deg, #3b82f6, #1d4ed8);
                  -webkit-background-clip: text;
                  -webkit-text-fill-color: transparent;
                  background-clip: text;
                }
                
                .blog-content p {
                  font-size: 1.1rem;
                  line-height: 1.8;
                  color: #4b5563;
                  margin-bottom: 1.25rem;
                }
                
                .blog-content ul {
                  margin: 1.5rem 0;
                  padding-left: 1.5rem;
                }
                
                .blog-content li {
                  font-size: 1.1rem;
                  line-height: 1.8;
                  color: #4b5563;
                  margin-bottom: 0.5rem;
                }
                
                .blog-content li strong {
                  color: #1f2937;
                  font-weight: 700;
                }
                
                .blog-content pre {
                  background: #1f2937;
                  color: #f3f4f6;
                  padding: 1.5rem;
                  border-radius: 0.75rem;
                  overflow-x: auto;
                  margin: 1.5rem 0;
                  border: 1px solid #374151;
                  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                }
                
                .blog-content code {
                  background: #f3f4f6;
                  color: #dc2626;
                  padding: 0.25rem 0.5rem;
                  border-radius: 0.375rem;
                  font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;
                  font-size: 0.9rem;
                  border: 1px solid #e5e7eb;
                }
                
                .blog-content pre code {
                  background: transparent;
                  color: inherit;
                  padding: 0;
                  border: none;
                  border-radius: 0;
                }
                
                .blog-content .feature-grid {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                  gap: 1.5rem;
                  margin: 2rem 0;
                }
                
                .blog-content .feature-card {
                  background: linear-gradient(135deg, #f8fafc, #e2e8f0);
                  border: 2px solid #cbd5e1;
                  border-radius: 1rem;
                  padding: 1.5rem;
                  transition: all 0.3s ease;
                }
                
                .blog-content .feature-card:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
                  border-color: #3b82f6;
                }
                
                .blog-content .feature-card h4 {
                  margin-top: 0;
                  margin-bottom: 0.75rem;
                  font-size: 1.1rem;
                  font-weight: 700;
                  color: #1e40af;
                }
                
                .blog-content .feature-card p {
                  margin: 0;
                  font-size: 0.95rem;
                  color: #475569;
                }
                
                .blog-content .code-example {
                  background: #f8fafc;
                  border: 1px solid #e2e8f0;
                  border-radius: 0.75rem;
                  padding: 1.5rem;
                  margin: 1.5rem 0;
                  border-left: 4px solid #3b82f6;
                }
                
                .blog-content .code-example h4 {
                  margin-top: 0;
                  margin-bottom: 1rem;
                  color: #1e40af;
                  font-size: 1.1rem;
                  font-weight: 600;
                }
                
                .blog-content .file-structure {
                  background: #1f2937;
                  color: #f3f4f6;
                  padding: 1.5rem;
                  border-radius: 0.75rem;
                  font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;
                  font-size: 0.9rem;
                  line-height: 1.6;
                  margin: 1.5rem 0;
                  border: 1px solid #374151;
                }
                
                .blog-content .file-structure .folder {
                  color: #60a5fa;
                }
                
                .blog-content .file-structure .file {
                  color: #34d399;
                }
                
                .blog-content .file-structure .comment {
                  color: #9ca3af;
                }
                
                .blog-content .highlight-box {
                  background: linear-gradient(135deg, #dbeafe, #bfdbfe);
                  border: 2px solid #3b82f6;
                  border-radius: 1rem;
                  padding: 1.5rem;
                  margin: 1.5rem 0;
                }
                
                .blog-content .highlight-box h4 {
                  margin-top: 0;
                  color: #1e40af;
                }
                
                .blog-content .highlight-box ul {
                  margin: 1rem 0 0 0;
                }
                
                .blog-content .highlight-box li {
                  margin-bottom: 0.5rem;
                }
              </style>
              
              <div class="blog-content">
                <h2>Next.js l√† g√¨?</h2>
                <p>Next.js l√† m·ªôt React framework cho ph√©p b·∫°n x√¢y d·ª±ng ·ª©ng d·ª•ng web full-stack v·ªõi c√°c t√≠nh nƒÉng nh∆∞ server-side rendering (SSR), static site generation (SSG), API routes, v√† nhi·ªÅu t√≠nh nƒÉng kh√°c. ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi Vercel, Next.js ƒë√£ tr·ªü th√†nh m·ªôt trong nh·ªØng framework ph·ªï bi·∫øn nh·∫•t cho React developers.</p>
                
                <h3>Nh·ªØng t√≠nh nƒÉng ch√≠nh c·ªßa Next.js 14</h3>
                <div class="feature-grid">
                  <div class="feature-card">
                    <h4>üöÄ App Router</h4>
                    <p>File-system based routing v·ªõi Server Components m·∫∑c ƒë·ªãnh</p>
                  </div>
                  <div class="feature-card">
                    <h4>‚ö° Server Components</h4>
                    <p>Gi·∫£m bundle size v√† c·∫£i thi·ªán performance</p>
                  </div>
                  <div class="feature-card">
                    <h4>üîß Turbopack</h4>
                    <p>Bundler nhanh h∆°n Webpack 700x</p>
                  </div>
                  <div class="feature-card">
                    <h4>üì± Responsive</h4>
                    <p>T·ªëi ∆∞u cho m·ªçi thi·∫øt b·ªã v√† m√†n h√¨nh</p>
                  </div>
                </div>

                <h3>1. C√†i ƒë·∫∑t v√† Kh·ªüi t·∫°o d·ª± √°n</h3>
                <p>B·∫Øt ƒë·∫ßu v·ªõi Next.js r·∫•t ƒë∆°n gi·∫£n:</p>
                <pre><code>npx create-next-app@latest my-next-app
cd my-next-app
npm run dev</code></pre>
                
                <p>Ho·∫∑c v·ªõi TypeScript:</p>
                <pre><code>npx create-next-app@latest my-next-app --typescript --tailwind --eslint</code></pre>

                <h3>2. App Router - C√°ch ti·∫øp c·∫≠n m·ªõi</h3>
                <p>Next.js 14 s·ª≠ d·ª•ng App Router v·ªõi c·∫•u tr√∫c th∆∞ m·ª•c m·ªõi:</p>
                <div class="file-structure">
<span class="folder">app/</span>
‚îú‚îÄ‚îÄ <span class="file">layout.tsx</span>          <span class="comment"># Root layout</span>
‚îú‚îÄ‚îÄ <span class="file">page.tsx</span>           <span class="comment"># Home page</span>
‚îú‚îÄ‚îÄ <span class="folder">about/</span>
‚îÇ   ‚îî‚îÄ‚îÄ <span class="file">page.tsx</span>       <span class="comment"># About page</span>
‚îú‚îÄ‚îÄ <span class="folder">blog/</span>
‚îÇ   ‚îú‚îÄ‚îÄ <span class="file">layout.tsx</span>     <span class="comment"># Blog layout</span>
‚îÇ   ‚îú‚îÄ‚îÄ <span class="file">page.tsx</span>       <span class="comment"># Blog list</span>
‚îÇ   ‚îî‚îÄ‚îÄ <span class="folder">[slug]/</span>
‚îÇ       ‚îî‚îÄ‚îÄ <span class="file">page.tsx</span>   <span class="comment"># Dynamic blog post</span>
‚îî‚îÄ‚îÄ <span class="folder">api/</span>
    ‚îî‚îÄ‚îÄ <span class="folder">users/</span>
        ‚îî‚îÄ‚îÄ <span class="file">route.ts</span>   <span class="comment"># API route</span></div>

                <h3>3. Server Components vs Client Components</h3>
                <p>Next.js 14 m·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng Server Components:</p>
                
                <div class="code-example">
                  <h4>Server Component (m·∫∑c ƒë·ªãnh)</h4>
                  <pre><code>// app/page.tsx
async function getData() {
  const res = await fetch('https://api.example.com/data')
  return res.json()
}

export default async function Page() {
  const data = await getData()
  
  return (
    &lt;main&gt;
      &lt;h1&gt;{data.title}&lt;/h1&gt;
      &lt;p&gt;{data.description}&lt;/p&gt;
    &lt;/main&gt;
  )
}</code></pre>
                </div>

                <div class="code-example">
                  <h4>Client Component</h4>
                  <pre><code>'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)
  
  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count}&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;
        Increment
      &lt;/button&gt;
    &lt;/div&gt;
  )
}</code></pre>
                </div>

                <h3>4. Data Fetching</h3>
                <p>Next.js cung c·∫•p nhi·ªÅu c√°ch ƒë·ªÉ fetch data:</p>
                
                <div class="code-example">
                  <h4>Server Components</h4>
                  <pre><code>// Fetch data tr·ª±c ti·∫øp trong Server Component
async function getPosts() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts')
  return res.json()
}

export default async function Posts() {
  const posts = await getPosts()
  
  return (
    &lt;ul&gt;
      {posts.map((post) =&gt; (
        &lt;li key={post.id}&gt;{post.title}&lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
}</code></pre>
                </div>

                <div class="code-example">
                  <h4>API Routes</h4>
                  <pre><code>// app/api/posts/route.ts
import { NextResponse } from 'next/server'

export async function GET() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts')
  const posts = await res.json()
  
  return NextResponse.json(posts)
}

export async function POST(request: Request) {
  const body = await request.json()
  
  // Process the data...
  
  return NextResponse.json({ message: 'Post created' })
}</code></pre>
                </div>

                <h3>5. Styling v√† CSS</h3>
                <p>Next.js h·ªó tr·ª£ nhi·ªÅu c√°ch styling:</p>
                
                <div class="code-example">
                  <h4>CSS Modules</h4>
                  <pre><code>/* app/components/Button.module.css */
.button {
  padding: 12px 24px;
  border-radius: 8px;
  background: #0070f3;
  color: white;
  border: none;
  cursor: pointer;
}

.button:hover {
  background: #0051b3;
}</code></pre>
                </div>

                <pre><code>// app/components/Button.tsx
import styles from './Button.module.css'

export default function Button({ children }) {
  return (
    &lt;button className={styles.button}&gt;
      {children}
    &lt;/button&gt;
  )
}</code></pre>

                <div class="code-example">
                  <h4>Tailwind CSS</h4>
                  <pre><code>export default function Card() {
  return (
    &lt;div className="max-w-sm rounded-lg overflow-hidden shadow-lg bg-white"&gt;
      &lt;div className="px-6 py-4"&gt;
        &lt;div className="font-bold text-xl mb-2"&gt;Card Title&lt;/div&gt;
        &lt;p className="text-gray-700 text-base"&gt;
          Card description goes here...
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
}</code></pre>
                </div>

                <h3>6. Routing v√† Navigation</h3>
                <p>Next.js App Router s·ª≠ d·ª•ng file-system based routing:</p>
                
                <div class="code-example">
                  <h4>Static Routes</h4>
                  <pre><code>// app/about/page.tsx
export default function About() {
  return (
    &lt;div&gt;
      &lt;h1&gt;About Us&lt;/h1&gt;
      &lt;p&gt;This is the about page.&lt;/p&gt;
    &lt;/div&gt;
  )
}</code></pre>
                </div>

                <div class="code-example">
                  <h4>Dynamic Routes</h4>
                  <pre><code>// app/blog/[slug]/page.tsx
export default function BlogPost({ params }: { params: { slug: string } }) {
  return (
    &lt;article&gt;
      &lt;h1&gt;Blog Post: {params.slug}&lt;/h1&gt;
      &lt;p&gt;This is the content for {params.slug}&lt;/p&gt;
    &lt;/article&gt;
  )
}</code></pre>
                </div>

                <div class="code-example">
                  <h4>Navigation</h4>
                  <pre><code>import Link from 'next/link'

export default function Navigation() {
  return (
    &lt;nav&gt;
      &lt;Link href="/"&gt;Home&lt;/Link&gt;
      &lt;Link href="/about"&gt;About&lt;/Link&gt;
      &lt;Link href="/blog"&gt;Blog&lt;/Link&gt;
    &lt;/nav&gt;
  )
}</code></pre>
                </div>

                <h3>7. Performance Optimization</h3>
                <p>Next.js c√≥ nhi·ªÅu t√≠nh nƒÉng t·ªëi ∆∞u performance:</p>
                
                <div class="code-example">
                  <h4>Image Optimization</h4>
                  <pre><code>import Image from 'next/image'

export default function OptimizedImage() {
  return (
    &lt;Image
      src="/hero.jpg"
      alt="Hero image"
      width={1200}
      height={600}
      priority
      className="rounded-lg"
    /&gt;
  )
}</code></pre>
                </div>

                <div class="code-example">
                  <h4>Font Optimization</h4>
                  <pre><code>import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    &lt;html lang="en"&gt;
      &lt;body className={inter.className}&gt;{children}&lt;/body&gt;
    &lt;/html&gt;
  )
}</code></pre>
                </div>

                <h3>8. Deployment</h3>
                <p>Deploy Next.js app r·∫•t d·ªÖ d√†ng:</p>
                
                <div class="code-example">
                  <h4>Vercel (Recommended)</h4>
                  <pre><code>npm install -g vercel
vercel</code></pre>
                </div>

                <div class="code-example">
                  <h4>Build cho production</h4>
                  <pre><code>npm run build
npm start</code></pre>
                </div>

                <h3>9. Best Practices</h3>
                <div class="highlight-box">
                  <h4>Nh·ªØng nguy√™n t·∫Øc quan tr·ªçng:</h4>
                  <ul>
                    <li><strong>S·ª≠ d·ª•ng Server Components khi c√≥ th·ªÉ:</strong> Gi·∫£m bundle size</li>
                    <li><strong>Optimize images:</strong> S·ª≠ d·ª•ng Next.js Image component</li>
                    <li><strong>Code splitting:</strong> T·ª± ƒë·ªông v·ªõi App Router</li>
                    <li><strong>SEO optimization:</strong> S·ª≠ d·ª•ng metadata API</li>
                    <li><strong>Error handling:</strong> T·∫°o error.tsx v√† loading.tsx</li>
                  </ul>
                </div>

                <h3>10. K·∫øt lu·∫≠n</h3>
                <p>Next.js 14 l√† m·ªôt framework m·∫°nh m·∫Ω cho vi·ªác x√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i. V·ªõi App Router, Server Components, v√† nhi·ªÅu t√≠nh nƒÉng t·ªëi ∆∞u, Next.js gi√∫p developers t·∫°o ra nh·ªØng ·ª©ng d·ª•ng web nhanh, SEO-friendly, v√† d·ªÖ maintain.</p>
                
                <p>B·∫Øt ƒë·∫ßu v·ªõi Next.js ngay h√¥m nay ƒë·ªÉ tr·∫£i nghi·ªám s·ª©c m·∫°nh c·ªßa React framework hi·ªán ƒë·∫°i nh·∫•t!</p>
              </div>
            ` }}
          />
        </article>

        <div className="bg-white rounded-xl p-6 mb-8 shadow-sm border border-gray-200">
          <h3 className="text-lg font-semibold mb-2 text-gray-900">V·ªÅ t√°c gi·∫£</h3>
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 bg-black rounded-full flex items-center justify-center">
              <span className="text-white font-bold text-lg">N</span>
            </div>
            <div>
              <p className="font-medium text-gray-900">{post.author}</p>
              <p className="text-gray-600 text-sm">Official Next.js Documentation Team</p>
            </div>
          </div>
        </div>

        {/* Next.js Features Highlight */}
        <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 mb-8 border border-blue-200">
          <h3 className="text-lg font-semibold mb-4 text-gray-900">T√≠nh nƒÉng n·ªïi b·∫≠t c·ªßa Next.js 14</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center gap-3">
              <Zap className="w-5 h-5 text-blue-500" />
              <span className="text-sm text-gray-700">Server Components m·∫∑c ƒë·ªãnh</span>
            </div>
            <div className="flex items-center gap-3">
              <Code className="w-5 h-5 text-green-500" />
              <span className="text-sm text-gray-700">App Router m·ªõi</span>
            </div>
            <div className="flex items-center gap-3">
              <Shield className="w-5 h-5 text-purple-500" />
              <span className="text-sm text-gray-700">Turbopack bundler</span>
            </div>
            <div className="flex items-center gap-3">
              <Globe className="w-5 h-5 text-orange-500" />
              <span className="text-sm text-gray-700">SEO optimization</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
